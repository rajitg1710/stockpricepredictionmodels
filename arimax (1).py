# -*- coding: utf-8 -*-
"""ARIMAX.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gzSd_ueziGnSxkcPomsI5P0VPWgyyUhP
"""

!pip install pmdarima
!pip install numpy==1.26.4

import pandas as pd
import warnings
import numpy as np
import matplotlib.pyplot as plt
from statsmodels.tsa.arima.model import ARIMA
from pandas_datareader import data as pdr
import yfinance as yf
from pmdarima import auto_arima

# Load stock data (adjust ticker & dates as needed)
df = pd.read_csv('MSFT_2015-2018.csv')
df = df[['Open', 'High', 'Low', 'Close', 'Volume']].dropna()

y = df['Close']
X = df[['Open', 'High', 'Low', 'Volume']]

from statsmodels.tsa.stattools import adfuller
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf

result = adfuller(df.Close.dropna())
print(f"ADF Statistic: {result[0]}")
print(f"p-value: {result[1]}")

df_diff = df['Close'].diff().dropna()
result_diff = adfuller(df_diff)
print('ADF Statistic:', result_diff[0])
print('p-value:', result_diff[1])

stepwise_model = auto_arima(df['Close'],
                            d=1,          # already determined
                            start_p=1, start_q=1,
                            max_p=10, max_q=10,
                            seasonal=False,
                            trace=True,
                            suppress_warnings=True)
print(stepwise_model.summary())

fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 4))

ax1.plot(df.Close)
ax1.set_title("Original")
plot_acf(df.Close, ax=ax2);

diff = df.Close.diff().dropna()

fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 4))

ax1.plot(diff)
ax1.set_title("Difference once")
plot_pacf(diff, ax=ax2);

diff = df.Close.diff().dropna()

fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 4))

ax1.plot(diff)
ax1.set_title("Difference once")
plot_acf(diff, ax=ax2);

from statsmodels.tsa.statespace.sarimax import SARIMAX

# Define the ARIMAX model: (p,d,q) = (3,1,3) as previously found
model = SARIMAX(endog=y, exog=X, order=(3, 1, 3))
model_fit = model.fit()

# View summary
print(model_fit.summary())

# Create a 1-row DataFrame for the next dayâ€™s exogenous values
exog_Jan2 = pd.DataFrame({
    'Open': [99.55],
    'High': [101.75],
    'Low': [98.94],
    'Volume': [35329300]
})

forecast = model_fit.forecast(steps=1, exog=exog_Jan2)
print("Forecasted Closing Price:", forecast.iloc[0])

exog_Jan3 = pd.DataFrame({
    'Open': [100.10],
    'High': [100.19],
    'Low': [97.20],
    'Volume': [42579100]
})

forecast = model_fit.forecast(steps=1, exog=exog_Jan3)
print("Forecasted Closing Price:", forecast.iloc[0])

exog_Jan4 = pd.DataFrame({
    'Open': [99.72],
    'High': [102.51],
    'Low': [98.93],
    'Volume': [44060600]
})

forecast = model_fit.forecast(steps=1, exog=exog_Jan4)
print("Forecasted Closing Price:", forecast.iloc[0])

exog_Jan7 = pd.DataFrame({
    'Open': [100.10],
    'High': [100.19],
    'Low': [97.20],
    'Volume': [42579100]
})

forecast = model_fit.forecast(steps=1, exog=exog_Jan7)
print("Forecasted Closing Price:", forecast.iloc[0])

exog_Jan8 = pd.DataFrame({
    'Open': [100.10],
    'High': [100.19],
    'Low': [97.20],
    'Volume': [42579100]
})

forecast = model_fit.forecast(steps=1, exog=exog_Jan8)
print("Forecasted Closing Price:", forecast.iloc[0])

exog_Jan9 = pd.DataFrame({
    'Open': [100.10],
    'High': [100.19],
    'Low': [97.20],
    'Volume': [42579100]
})

forecast = model_fit.forecast(steps=1, exog=exog_Jan9)
print("Forecasted Closing Price:", forecast.iloc[0])

